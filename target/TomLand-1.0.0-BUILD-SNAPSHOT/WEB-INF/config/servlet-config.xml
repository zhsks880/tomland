<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 자동으로 컨트롤러와 매핑 메서드를 탐색(핸들러 매핑, 핸들러 어댑터 빈 등록) -->
	<annotation-driven />

	<beans:bean
		class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
		<beans:property name="locations">
			<beans:list>
				<beans:value>classpath:/db-config/email.properties</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- 정적자원 설정: css, img, js....의 파일 경로가 복잡할 때 사용 : jsp 파일에서 경로 설정 시 단축 및 
		내부 경로를 숨김 -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/img/**" location="/resources/img/" />


	<!-- 뷰 리졸버: 컨트롤러가 리턴 한 문자열 앞, 뒤에 경로 설정 -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!-- 어노테이션으로 등록된 클래스 들을 탐색: base-package 에 탐색할 패키지 경로를 쓰면 하위 패키지 모두 검색진행 -->
	<context:component-scan base-package="com.spring.TomLand" />

	<!-- 인터셉터 빈 등록 : new->springconfig->따로 xml 파일 작성 -->

	<!-- 파일 업로드 빈 등록 : id를 아무거나 하지마라 / Multipart 형식으로 전달되는 데이터를 스프링 mvc에서 사용할 
		수 있도록 변환해 주는 객체 -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- value: 현재 최대 10MB 제한(-1은 제한없이 받겠다) -->
		<beans:property name="maxUploadSize" value="10485760" />

		<!-- 업로드 요청을 변환할 때 사용할 문자 인코딩 방식 -->
		<beans:property name="defaultEncoding" value="utf-8" />
	</beans:bean>
	
	
	<!-- 공통 로그들, 예외처리 내용들을 기존 클래스와 분리해서 객체 지향적으로 사용하기 위해 Aspect(공통 로직들)과 Target(Service 
		클래스들, 메서드들)을 연결 할 수 있도록 가상 환경을 구축해 주고 아노테이션을 제공하는 빈 -->
<!-- 	<aop:aspectj-autoproxy /> -->


</beans:beans>
